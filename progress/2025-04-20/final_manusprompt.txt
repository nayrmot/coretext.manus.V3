# CoreText Document Management System
# Final Requirements and Implementation Roadmap

## Overview

This document serves as the comprehensive requirements specification and implementation roadmap for the CoreText Document Management System. It consolidates all requirements from Phase 1 (Database Implementation & Case Selection) and Phase 2 (Document Upload & Management), with special emphasis on the AI-assisted folder management and Google Drive integration features.

## Phase 1: Database Implementation & Case Selection

### Core Requirements

1. **Case Management**
   - Create, read, update, and delete case records
   - Store case metadata (name, description, status)
   - Associate clients with cases

2. **Client Management**
   - Create, read, update, and delete client records
   - Store client information (name, contact details)
   - Support both individual clients and estates
   - For estates, use the format "Estate of [First Name] [Last Name]"
   - For regular clients, use the format "[Last Name], [First Name]"

3. **User Authentication**
   - Secure user login and registration
   - Role-based access control
   - JWT token authentication

4. **API Endpoints**
   - RESTful API for all operations
   - Protected routes requiring authentication
   - Public routes for non-sensitive operations

### Database Schema

1. **Case Model**
   - ID, name, description, status, timestamps
   - Relationships to clients and documents

2. **Client Model**
   - ID, first name, last name, email, phone, isEstate flag
   - Relationship to case

3. **User Model**
   - ID, name, email, password (hashed), role
   - Timestamps for creation and updates

## Phase 2: Document Upload & Management

### Core Requirements

1. **Document Storage**
   - Upload and store documents
   - Organize documents by case and client
   - Support various document formats (PDF, DOCX, etc.)
   - Track document metadata

2. **Document Categorization**
   - Categorize documents by type
   - Tag documents for easy retrieval
   - Group related documents

3. **Document Search**
   - Search documents by metadata
   - Filter documents by category, tag, and date
   - Sort search results

4. **Bates Labeling**
   - Generate Bates numbers
   - Apply Bates labels to documents
   - Track original and Bates labeled versions
   - Maintain mirror folder structure between original and Bates labeled documents

### Google Drive Integration

1. **Folder Structure Compatibility**
   - Maintain compatibility with existing Google Drive folder structure
   - Support the following folder hierarchy:
     ```
     [Last Name], [First Name]/
     ├── CaseMap/
     ├── Communications/
     ├── Contract/
     ├── Costs/
     ├── Discovery/
     ├── Documents/
     │   ├── Bates Labeled/
     │   │   ├── 01-Medical Records/
     │   │   └── 02-Medical Bills/
     │   └── Original/
     │       ├── 01-Medical Records/
     │       └── 02-Medical Bills/
     ├── Experts/
     │   ├── Plaintiffs/
     │   └── Defendants/
     ├── Motions/
     ├── Notices/
     ├── Pleadings/
     ├── Research/
     ├── Settlement/
     └── Trial/
     ```
   - For estate cases, use "Estate of [First Name] [Last Name]" as the top-level folder

2. **Document Storage in Google Drive**
   - Store documents in Google Drive
   - Maintain proper folder organization
   - Link documents in the system to Google Drive files

3. **File Operations**
   - Upload files to Google Drive
   - Download files from Google Drive
   - Generate shareable links

### AI-Assisted Folder Management

1. **Case Document Location**
   - Allow each case to define its top-level "Documents" folder location
   - Link cases to Google Drive folders

2. **Client Folder Suggestion**
   - Use AI to suggest the correct client folder on Google Drive
   - Match client names with existing folders using fuzzy matching
   - Present suggestions to users with confidence scores

3. **Folder Creation**
   - Create client folders if they don't exist
   - Follow the standard folder structure
   - Allow customization of which subfolders to create

4. **Folder Structure Customization**
   - Allow customization of folder structure at the case level
   - Support adding, removing, and renaming folders
   - Maintain consistency across cases

## Implementation Roadmap

### Phase 1: Database Implementation & Case Selection (Completed)

1. **Week 1-2: Setup and Authentication**
   - Set up project structure
   - Implement user authentication
   - Create basic API structure

2. **Week 3-4: Case Management**
   - Implement case model and controllers
   - Create case API endpoints
   - Develop case listing and detail pages

3. **Week 5-6: Client Management**
   - Implement client model and controllers
   - Create client API endpoints
   - Develop client management interface

4. **Week 7-8: Integration and Testing**
   - Integrate all components
   - Implement case-client relationships
   - Test and fix issues

### Phase 2: Document Upload & Management (8 Weeks)

1. **Week 1-3: Foundation**
   - Set up Google Drive API integration
   - Implement enhanced data models
   - Create core services

2. **Week 4-5: AI-Assisted Folder Management**
   - Implement folder suggestion
   - Create folder creation functionality
   - Develop folder management interface

3. **Week 6-7: Document Management**
   - Implement document upload
   - Create document browser
   - Develop document organization features

4. **Week 8: Bates Labeling**
   - Implement Bates number generation
   - Create Bates label application
   - Develop mirror folder structure management

### Phase 3: Advanced Features (Future)

1. **Week 1-3: Advanced Document Management**
   - Document versioning
   - Document annotation
   - Full-text search

2. **Week 4-6: Workflow Automation**
   - Document review workflows
   - Notification system
   - Batch processing

3. **Week 7-9: Enhanced Collaboration**
   - Document sharing
   - Collaborative editing
   - Discussion threads

4. **Week 10-12: Integration Enhancements**
   - Email integration
   - Calendar integration
   - Third-party tool integration

## Technical Architecture

### Backend

1. **Node.js Server**
   - Express.js framework
   - RESTful API endpoints
   - JWT authentication

2. **MongoDB Database**
   - Document-oriented storage
   - Mongoose ODM
   - Indexing for performance

3. **Google Drive Integration**
   - Google Drive API v3
   - OAuth 2.0 authentication
   - File and folder operations

### Frontend

1. **HTML/CSS/JavaScript**
   - Bootstrap for responsive design
   - Custom CSS for styling
   - JavaScript for interactivity

2. **Document Viewer**
   - PDF.js for PDF viewing
   - Document preview
   - Annotation tools (Phase 3)

3. **User Interface Components**
   - Case management interface
   - Document upload interface
   - Folder management interface
   - Bates labeling interface

## Conclusion

This document provides a comprehensive overview of the requirements and implementation roadmap for the CoreText Document Management System. By following this roadmap, the development team will be able to implement a robust document management system that integrates seamlessly with Google Drive and provides powerful AI-assisted folder management capabilities.

The system will maintain compatibility with the existing folder structure while adding significant value through automation, organization, and enhanced document management features. The phased approach ensures that the system can be developed and deployed incrementally, with each phase building on the foundation established by previous phases.
